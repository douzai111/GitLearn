你已经在本地创建了一个Git仓库，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。
1. 首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库。
2. 在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。
3. 目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：
$ git remote add origin git@github.com:douzai/learngit.git
添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
4. 下一步，就可以把本地库的所有内容推送到远程库上：
$ git remote add origin git@github.com:douzai111/learngit.git
若此时报错显示remote repo alr exists
解决办法为：
$ git remote -v  # 先查看是哪个
$ git remote rm origin  # 删除
* 此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。
解决完了之后继续：
$ git remote add origin git@github.com:douzai111/learngit.git
$ git branch -M main
$ git push -u origin main

* 由于远程库是空的，第一次推送master分支，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以
简化命令。

* 从现在起，只要本地作了提交，就可以通过命令：
$ git push origin master
把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！

