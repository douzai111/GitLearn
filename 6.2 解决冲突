1. 准备新的feature1分支，继续我们的新分支开发：
$ git switch -c feature1
2. 修改readme.txt最后一行，改为：
Creating a new branch is quick AND simple.
3. 在feature1分支上提交：
$ git add readme.txt
$ git commit -m "AND simple"

4. 切换到master分支：
$ git switch main
5. 在master分支上把readme.txt文件的最后一行改为：
Creating a new branch is quick & simple.
6. 提交：
$ git add readme.txt 
$ git commit -m "& simple"

7. 现在，master分支和feature1分支各自都分别有新的提交.
这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：
$ git merge feature1
Auto-merging readme.txt
CONFLICT (content): Merge conflict in readme.txt
Automatic merge failed; fix conflicts and then commit the result.
果然冲突了！Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交。

8. git status也可以告诉我们冲突的文件：
$ git status

9. 我们可以直接查看readme.txt的内容：
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
<<<<<<< HEAD
Creating a new branch is quick & simple.
=======
Creating a new branch is quick AND simple.
>>>>>>> feature1
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容。

10. 我们修改如下后保存：
$ vi readme.txt
Creating a new branch is quick and simple.
11. 再提交：
$ git add readme.txt 
$ git commit -m "conflict fixed"
[master cf810e4] conflict fixed

12. 用带参数的git log也可以看到分支的合并情况：
$ git log --graph --pretty=oneline --abbrev-commit

13. 最后，删除feature1分支：
$ git branch -d feature1

工作完成。


小结
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。
