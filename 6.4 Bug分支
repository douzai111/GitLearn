软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。

# 注意：此时你新建的dev里面的文件都已经merge到了main里面，唯独对dev里面文件的一些修改还没有merge上去的时候，刚刚完成例如：
$ vi test.txt的时候，应用下述代码：

当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：
$ git status
On branch dev
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	new file:   hello.py

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   readme.txt

并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？

方法：
1. 幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
$ git stash
Saved working directory and index state WIP on dev: f52c633 add merge
2. 现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。

3. 首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从main创建临时分支：
$ git checkout main
$ git checkout -b issue-101

4. 现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交：
$ vi readme.txt
$ git add readme.txt 
$ git commit -m "fix bug 101"

5. 修复完成后，切换到main分支，并完成合并，最后删除issue-101分支：
$ git switch main
$ git merge --no-ff -m "merged bug fix 101" issue-101

6. 现在，是时候接着回到dev分支干活了！
$ git switch dev
$ git status  

7. 工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：
$ git stash list

8. 工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
① 一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
这种情况下，你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
$ git stash apply stash@{0}
全部删除完了再：
$ git stash drop
② 另一种方式是用git stash pop，恢复的同时把stash内容也删了
$ git stash pop

在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。
那怎么在dev分支上修复同样的bug？重复操作一次，提交不就行了？
有木有更简单的方法？
有！
同样的bug，要在dev上修复，我们只需要把5c6a72b fix bug 101这个提交所做的修改“复制”到dev分支。注意：我们只想复制5c6a72b fix bug 101这个提交所做的修改，并不是把整个main分支merge过来。
为了方便操作，Git专门提供了一个cherry-pick命令，让我们能复制一个特定的提交到当前分支：
$ git branch
$ git cherry-pick 5c6a72b

* Git自动给dev分支做了一次提交，注意这次提交的commit是1d4b803，它并不同于main的4c805e2，因为这两个commit只是改动相同，但确实是两个不同的commit。用git cherry-pick，我们就不需要在dev分支
上手动再把修bug的过程重复一遍。
* 既然可以在master分支上修复bug后，在dev分支上可以“重放”这个修复过程，那么直接在dev分支上修复bug，然后在main分支上“重放”行不行？当然可以，不过你仍然需要git stash命令保存现场，才能从dev分支
切换到main分支。

小结:
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。





